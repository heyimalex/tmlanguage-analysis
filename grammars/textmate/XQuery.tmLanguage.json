{
  "fileTypes": [
    "xq",
    "xql",
    "xqm",
    "xqy",
    "xquery"
  ],
  "firstLineMatch": "^\\bxquery version\\b.*",
  "keyEquivalent": "^~X",
  "name": "XQuery",
  "patterns": [
    {
      "match": "^xquery version .*;$",
      "name": "keyword.control.import.xquery"
    },
    {
      "match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))(?=[^a-zA-Z_])",
      "name": "constant.numeric.float.xquery"
    },
    {
      "match": "(?<=[^0-9a-zA-Z_])(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))",
      "name": "constant.numeric.float.xquery"
    },
    {
      "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))",
      "name": "constant.numeric.float.xquery"
    },
    {
      "match": "\\b([1-9]+[0-9]*|0)",
      "name": "constant.numeric.integer.decimal.xquery"
    },
    {
      "match": "\\b(import|module|schema)\\b",
      "name": "keyword.control.import.xquery"
    },
    {
      "begin": "\\(:",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.xquery"
        }
      },
      "end": ":\\)",
      "name": "comment.block.xquery"
    },
    {
      "comment": "http://www.w3.org/TR/xpath-datamodel/#types",
      "match": "(?<![:\\-_a-zA-Z0-9])((xs:)(string|boolean|decimal|float|double|duration|dateTime|time|date|gYearMonth|gYear|gMonthDay|gDay|gMonth|hexBinary|base64Binary|anyURI|QName|NOTATION|anyAtomicType|anyType|anySimpleType|untypedAtomic|dayTimeDuration|yearMonthDuration|integer|nonPositiveInteger|negativeInteger|long|int|short|byte|nonNegativeInteger|unsignedLong|unsignedInt|unsignedShort|unsignedByte|positiveInteger|ENTITY|ID|NMTOKEN|language|NCName|Name|token|normalizedString))(?![:\\-_a-zA-Z0-9])",
      "name": "support.type.xquery"
    },
    {
      "include": "#function_call"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.variable.xquery"
        }
      },
      "match": "((\\$)(?:([\\-_a-zA-Z0-9]+)((:)))?([\\-_a-zA-Z0-9]+))",
      "name": "variable.other.xquery"
    },
    {
      "match": "/(child|descendant|attribute|self|descendant-or-self|following-sibling|following|parent|ancestor|preceding-sibling|preceding|ancestor-or-self)::",
      "name": "support.constant.xquery"
    },
    {
      "include": "text.xml"
    },
    {
      "captures": {
        "1": {
          "name": "keyword.other.xquery"
        },
        "2": {
          "name": "storage.type.function.xquery"
        },
        "3": {
          "name": "entity.name.function.xquery"
        }
      },
      "match": "(declare)\\s+(function)\\s+((?:([\\-_a-zA-Z0-9]+):)?([\\-_a-zA-Z0-9]+))",
      "name": "meta.function.xquery"
    },
    {
      "captures": {
        "1": {
          "name": "keyword.other.xquery"
        },
        "2": {
          "name": "storage.type.variable.xquery"
        }
      },
      "match": "(declare)\\s+(variable)",
      "name": "meta.variable.xquery"
    },
    {
      "match": "\\b(declare|namespace|preserve|no-preserve|inherit|no-inherit|strip|boundary-space|default|instance|option|copy-namespaces)\\b",
      "name": "keyword.other.prolog.xquery"
    },
    {
      "match": "(?<![:\\-_a-zA-Z0-9])(of|as|by|in|at|or|and)(?![:\\-_a-zA-Z0-9])",
      "name": "keyword.operator.logical.xquery"
    },
    {
      "captures": {
        "1": {
          "name": "keyword.control.flow.xquery"
        }
      },
      "match": "(?<![:\\-_a-zA-Z0-9])(for|let|return|where|if|then|else|order by|satisfies|every)(?![:\\-_a-zA-Z0-9])"
    },
    {
      "captures": {
        "1": {
          "name": "support.type.xquery"
        }
      },
      "match": "(?<![:\\-_a-zA-Z0-9])(element|attribute|document-node|schema-element|schema-attribute|processing-instruction|comment|text|node)(?![:\\-_a-zA-Z0-9])"
    },
    {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.xquery"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.xquery"
        }
      },
      "name": "string.quoted.double.xquery"
    },
    {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.xquery"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.xquery"
        }
      },
      "name": "string.quoted.single.xquery"
    },
    {
      "match": ":=",
      "name": "keyword.operator.assignment.xquery"
    },
    {
      "match": "(?<![:\\-_a-zA-Z0-9])(\\+|-|<=?|>=?|eq|ne|lt|le|ge|gt|\\*|div|idiv|mod)(?![:\\-_a-zA-Z0-9])",
      "name": "keyword.operator.arithmetic.xquery"
    },
    {
      "match": "(?<![:\\-_a-zA-Z0-9])((fn:)?(abs|adjust-date-to-timezone|adjust-date-to-timezone|adjust-dateTime-to-timezone|adjust-dateTime-to-timezone|adjust-time-to-timezone|adjust-time-to-timezone|avg|base-uri|base-uri|boolean|ceiling|codepoint-equal|codepoints-to-string|collection|collection|compare|concat|contains|count|current-date|current-dateTime|current-time|data|dateTime|day-from-date|day-from-dateTime|days-from-duration|deep-equal|default-collation|distinct-values|distinct-values|doc|doc-available|document-uri|empty|ends-with|error|escape-uri|exactly-one|exists|false|floor|hours-from-dateTime|hours-from-duration|hours-from-time|id|idref|implicit-timezone|in-scope-prefixes|index-of|insert-before|lang|last|local-name|local-name-from-QName|lower-case|matches|max|min|minutes-from-dateTime|minutes-from-duration|minutes-from-time|month-from-date|month-from-dateTime|months-from-duration|name|namespace-uri|namespace-uri-for-prefix|namespace-uri-from-QName|nilled|node-name|normalize-space|normalize-unicode|not|number|one-or-more|position|prefix-from-QName|QName|remove|replace|resolve-QName|resolve-uri|reverse|root|round|round-half-to-even|seconds-from-dateTime|seconds-from-duration|seconds-from-time|starts-with|static-base-uri|string|string-join|string-length|string-to-codepoints|subsequence|substring|substring-after|substring-before|sum|timezone-from-date|timezone-from-dateTime|timezone-from-time|tokenize|trace|translate|true|unordered|upper-case|year-from-date|year-from-dateTime|years-from-duration|zero-or-one))(?=\\s*\\()",
      "name": "support.function.builtin.xquery"
    },
    {
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.section.scope.begin.xquery"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.scope.end.xquery"
        }
      },
      "name": "meta.scope.xquery",
      "patterns": [
        {
          "include": "$self"
        }
      ]
    }
  ],
  "repository": {
    "function_call": {
      "begin": "[\\-_a-zA-Z0-9]+:[\\-_a-zA-Z0-9]+(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.parameters.begin.xquery"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.parameters.end.xquery"
        }
      },
      "patterns": [
        {
          "include": "#function_call"
        },
        {
          "include": "$self"
        }
      ]
    }
  },
  "scopeName": "source.xquery",
  "uuid": "5FB86104-E38E-4DAA-B929-DF98011DECBD"
}